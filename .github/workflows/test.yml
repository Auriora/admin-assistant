name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    environment: Testing
    strategy:
      matrix:
        python-version: ['3.12']  # TODO: Re-enable 3.13 when asyncpg supports it
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Create virtual environment
      run: |
        python -m venv .venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH

    - name: Upgrade pip
      run: |
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        pip install -e .[dev]

    - name: Set up test environment
      run: |
        # Create instance directory for any file-based operations
        mkdir -p instance
      env:
        APP_ENV: testing
        DATABASE_URL: "sqlite:///:memory:"
        CORE_DATABASE_URL: "sqlite:///:memory:"
        LOG_LEVEL: INFO
        OTEL_SDK_DISABLED: true

    - name: Run tests with coverage
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --cov=src/core --cov=src/cli --cov-report=xml --cov-report=html --cov-report=term-missing --tb=short
      env:
        APP_ENV: testing
        DATABASE_URL: "sqlite:///:memory:"
        CORE_DATABASE_URL: "sqlite:///:memory:"
        LOG_LEVEL: INFO
        OTEL_SDK_DISABLED: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml
