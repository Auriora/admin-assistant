name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    environment: Testing
    strategy:
      matrix:
        python-version: ['3.12']  # TODO: Re-enable 3.13 when asyncpg supports it
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Create virtual environment
      run: |
        python -m venv .venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH

    - name: Upgrade pip
      run: |
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        pip install -e .[dev]

    - name: Set up test environment
      run: |
        # Create instance directory for any file-based operations
        mkdir -p instance
      env:
        APP_ENV: testing
        DATABASE_URL: "sqlite:///:memory:"
        CORE_DATABASE_URL: "sqlite:///:memory:"
        LOG_LEVEL: INFO
        OTEL_SDK_DISABLED: true

    - name: Run tests with coverage
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --cov=src/core --cov=src/cli --cov-report=xml --cov-report=html --cov-report=term-missing --tb=short
      env:
        APP_ENV: testing
        DATABASE_URL: "sqlite:///:memory:"
        CORE_DATABASE_URL: "sqlite:///:memory:"
        LOG_LEVEL: INFO
        OTEL_SDK_DISABLED: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml

  lint:
    runs-on: ubuntu-latest
    environment: Testing
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: Create virtual environment
      run: |
        python -m venv .venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install flake8 black isort mypy

    - name: Run flake8
      run: |
        source .venv/bin/activate
        flake8 src/core/ src/cli/ src/web/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/core/ src/cli/ src/web/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        source .venv/bin/activate
        black --check --diff src/core/ src/cli/ src/web/

    - name: Check import sorting with isort
      run: |
        source .venv/bin/activate
        isort --check-only --diff src/core/ src/cli/ src/web/

    - name: Run type checking with mypy
      run: |
        source .venv/bin/activate
        mypy src/core/ src/cli/ src/web/ --ignore-missing-imports || true

  security:
    name: Additional Security Scanning
    runs-on: ubuntu-latest
    environment: Testing
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Create virtual environment
      run: |
        python -m venv .venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH

    - name: Install dependencies and security tools
      run: |
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install safety bandit semgrep

    - name: Run safety check for known vulnerabilities
      run: |
        source .venv/bin/activate
        echo "::group::Safety Check - Dependency Vulnerabilities"
        echo "Checking Python dependencies for known security vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check --short-report || true
        echo "::endgroup::"

    - name: Run bandit security linter
      run: |
        source .venv/bin/activate
        echo "::group::Bandit Security Linter - Python Code Analysis"
        echo "Scanning Python code for common security issues..."
        bandit -r src/core/ src/cli/ src/web/ -f json -o bandit-report.json || true
        bandit -r src/core/ src/cli/ src/web/ -f txt || true
        echo "::endgroup::"

    - name: Run semgrep security analysis
      run: |
        source .venv/bin/activate
        echo "::group::Semgrep Security Analysis - Pattern Matching"
        echo "Running advanced security pattern analysis..."
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        semgrep --config=auto src/ || true
        echo "::endgroup::"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

    - name: Security scan summary
      run: |
        echo "::notice::Security scanning completed. CodeQL provides primary security analysis, while Safety, Bandit, and Semgrep provide complementary vulnerability detection."
